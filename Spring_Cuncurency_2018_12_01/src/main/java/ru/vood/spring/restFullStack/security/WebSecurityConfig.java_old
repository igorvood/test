package ru.vood.spring.restFullStack.security;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    private UserDetailsServiceImpl userDetailsService;

    private TokenAuthService tokenAuthService;

    @Autowired
    public WebSecurityConfig(UserDetailsServiceImpl userDetailsService, TokenAuthService tokenAuthService) {
        this.userDetailsService = userDetailsService;
        this.tokenAuthService = tokenAuthService;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .addFilterBefore(new StatlessAuthenticationFilter(tokenAuthService), UsernamePasswordAuthenticationFilter.class)
                .authorizeRequests()
                .antMatchers("/css/**").permitAll()
                .anyRequest().fullyAuthenticated()
                .and().formLogin().permitAll()
                .and().logout().permitAll();
    }

    @Bean
    public PasswordEncoder bccruptPasswordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
        auth
                .userDetailsService(userDetailsService)
                .passwordEncoder(bccruptPasswordEncoder());
    }
    /*
        @Configuration
        protected static class AuthenticationConfiguration extends GlobalAuthenticationConfigurerAdapter {
            @Override
            public void init(AuthenticationManagerBuilder auth) throws Exception {
                auth.ldapAuthentication().userDnPatterns("uid={0},ou=people")
                        .groupSearchBase("ou=groups").contextSource()
                        .ldif("classpath:test-server.ldif");
            }
        }
    */
}
